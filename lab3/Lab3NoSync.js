const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');

// Общий счетчик
let counter = 0;

// Функция для инкрементации и декрементации счетчика
function modifyCounter(value) {
    for (let i = 0; i < 100000; i++) {
        let temp = counter; // Считывание значения счетчика в локальную переменную
        temp += value; // Инкрементация или декрементация
        counter = temp; // Сохранение обратно в счетчик
    }
}

// Функция для создания потоков
function createThreads(n, m) {
    for (let i = 0; i < n; i++) {
        const w = new Worker('./incrementWorker.js');
        w.on('message', (msg) => {
            if (msg === 'increment') {
                modifyCounter(1);
            }
        });
    }

    for (let i = 0; i < m; i++) {
        const w = new Worker('./decrementWorker.js');
        w.on('message', (msg) => {
            if (msg === 'decrement') {
                modifyCounter(-1);
            }
        });
    }
}

// Основная логика программы
if (isMainThread) {
    const n = +process.argv[2];
    const m = +process.argv[3];
    const startTime = new Date();

    createThreads(n, m);

    // Вывод значения счетчика и времени выполнения
    setImmediate(() => {
        console.log(`Значение счетчика: ${counter}`);
        console.log(`Время выполнения: ${new Date() - startTime}ms`);
    });
}

/*
Этот код является частью среды worker_threads в Node.js. Давайте разберем каждую строку по отдельности:

isMainThread - это свойство, предоставляемое модулем worker_threads, которое определяет, является ли текущий поток главным. 
Главный поток - это основной процесс, который запускает дочерние потоки.

process.argv - это массив аргументов командной строки. Первый элемент массива (process.argv[0]) обычно содержит путь к исполняемому 
файлу Node.js, а второй элемент (process.argv[1]) содержит путь к текущему скрипту. Все последующие элементы содержат аргументы 
командной строки, переданные при запуске скрипта.

+process.argv[2] и +process.argv[3] используются для получения значений первых двух аргументов командной строки (n и m в данном случае) 
в виде чисел. Унарный плюс (+) перед строкой преобразует строку в число.

const startTime = new Date(); - создает новый объект Date, который представляет текущее время. Это используется для отслеживания 
времени начала выполнения программы.

Таким образом, эти строки кода инициализируют переменные n и m из аргументов командной строки, а также устанавливают startTime в текущее время.
 Это полезно для отслеживания времени выполнения программы, а также для получения других входных параметров из командной строки.*/